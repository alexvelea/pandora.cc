@misc{progimpact,
  author = {Emery D. Berger and Celeste Hollenbeck and Petr Maj and Olga Vitek and Jan Vitek},
  title = {On the Impact of Programming Languages on Code Quality},
  year = {2019},
  note = {arXiv:1901.10220},
}

@inproceedings{viggiato,
  author = {Viggiato, Markos and Terra, Ricardo and Rocha, Henrique and Valente, Marco and Figueiredo, Eduardo},
  year = {2018},
  month = {09},
  pages = {},
  title = {Microservices in Practice: A Survey Study},
  note = {Conference: VI Workshop on Software Visualization, Evolution and Maintenance, At São Carlos - Brazil}
}

@inproceedings{hassan,
author = {Hassan, Sara and Ali, Nour and Bahsoon, Rami},
year = {2017},
month = {04},
pages = {},
title = {Microservice Ambients: An Architectural Meta-Modelling Approach for Microservice Granularity},
doi = {10.1109/ICSA.2017.32},
note = {IEEE ICSA, pages 1–10, doi: 10.1109/ICSA.2017.32}
}

@BOOK{newman,
  TITLE = {Building Microservices},
  SUBTITLE = {Designing Fine-Grained Systems},
  AUTHOR = {Sam Newman},
  YEAR = {2015},
  PUBLISHER = {O'Reilly Media},
}

@inproceedings{alshuqayran,
title = "A Systematic Mapping Study in Microservice Architecture",
abstract = "The accelerating progress of network speed, reliability and security creates an increasing demand to move software and services from being stored and processed locally on users’ machines to being managed by third parties that are accessible through the network. This has created the need to develop new software development methods and software architectural styles that meet these new demands. One such example in software architectural design is the recent emergence of the microservices architecture to address the maintenance and scalability demands of online service providers. As microservice architecture is a new research area, the need for a systematic mapping study is crucial in order to summarise the progress so far and identify the gaps and requirements for future studies. In this paper we present a systematic mapping study of microservices architectures and their implementation. Our study focuses on identifying architectural challenges, the architectural diagrams/views and quality attributes related to microsevice systems.",
author = "Nuha Alshuqayran and Nour Ali and Roger Evans",
year = "2016",
month = "11",
day = "4",
doi = "10.1109/SOCA.2016.15",
language = "English",
pages = "44--51",
booktitle = "2016 IEEE 9th International Conference on Service-Oriented Computing and Applications",
publisher = "IEEE",
}

@article{klock,
  title={Workload-Based Clustering of Coherent Feature Sets in Microservice Architectures},
  author={Sander Klock and Jan Martijn E. M. van der Werf and Jan Pieter Guelen and Slinger Jansen},
  journal={2017 IEEE International Conference on Software Architecture (ICSA)},
  year={2017},
  pages={11-20}
}

@inproceedings{charousset,
  author = {Dominik Charousset and Thomas C. Schmidt and Raphael Hiesgen and Matthias W{\"a}hlisch},
  title = {{Native Actors -- A Scalable Software Platform for Distributed, Heterogeneous Environments}},
  booktitle = {Proc. of the 4rd ACM SIGPLAN Conference on Systems, Programming, and Applications (SPLASH '13), Workshop AGERE!},
  pages = {87--96},
  month = {Oct.},
  year = {2013},
  publisher = {ACM},
  address = {New York, NY, USA},
  abstract = "Writing concurrent software is challenging, especially with low-level synchronization primitives such as threads or locks in shared memory environments. The actor model replaces implicit communication by an explicit message passing in a ``shared-nothing'' paradigm. It applies to concurrency as well as distribution, but has not yet entered the native programming domain. This paper contributes the design of a native actor extension for C++, and the report on a software platform that implements our design for (a) concurrent, (b) distributed, and (c) heterogeneous hardware environments. GPGPU and embedded hardware components are integrated in a transparent way. Our software plattform supports the development of scalable and efficient parallel software. It includes a lock-free mailbox algorithm with pattern matching facility for message processing. Thorough performance evaluations reveal an extraordinary small memory footprint in realistic application scenarios, while runtime performance not only outperforms existing mature actor implementations, but exceeds the scaling behavior of low-level message passing libraries such as OpenMPI."
}


@inproceedings{hewitt,
author = {Hewitt, Carl and Bishop, Peter and Steiger, Richard},
title = {A Universal Modular ACTOR Formalism for Artificial Intelligence},
year = {1973},
publisher = {Morgan Kaufmann Publishers Inc.},
address = {San Francisco, CA, USA},
booktitle = {Proceedings of the 3rd International Joint Conference on Artificial Intelligence},
pages = {235–245},
numpages = {11},
location = {Stanford, USA},
series = {IJCAI’73}
}

@misc{monzo,
  author={Jack Kleeman},
  title={We built network isolation for 1,500 services to make Monzo more secure},
  note = {Available at https://monzo.com/blog/we-built-network-isolation-for-1-500-services},
  year = {2019},
  month={11},
}

@misc{mpscq,
  author={Dmitry Vyukov},
  title={Non-intrusive MPSC node-based queue},
  note = {Available at http://www.1024cores.net/home/lock-free-algorithms/queues/non-intrusive-mpsc-node-based-queue},
}

@misc{mpscq-implement,
  author={Matt Stump},
  title={A public domain lock free queues implemented in C++11},
  note = {https://github.com/mstump/queues/blob/master/include/mpsc-queue.hpp},
}
